name: Build VPN App

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ['3.9']
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install qt@5
        brew link qt@5
        brew install pyqt@5
        brew install openvpn
        echo 'export PATH="/usr/local/opt/qt@5/bin:$PATH"' >> ~/.bash_profile
        source ~/.bash_profile
        
    - name: Install Python dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        python -m pip install --upgrade pip
        pip install PyInstaller
        pip install pexpect
        # Install latest PyQt5 version
        pip install --only-binary :all: PyQt5==5.15.11 PyQt5-Qt5 PyQt5-sip

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-dev python3-pyqt5 python3-pyqt5.qtwebengine qttools5-dev-tools build-essential libqt5x11extras5-dev openvpn libssl-dev libffi-dev

    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        python -m pip install --upgrade pip
        pip install wheel
        pip install pywin32
        choco install openvpn -y

    - name: Install Python dependencies (non-macOS)
      if: matrix.os != 'macos-latest'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install PyInstaller

    - name: Create executable (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Find OpenVPN location
        OPENVPN_PATH=$(brew --prefix openvpn)/sbin/openvpn
        echo "OpenVPN path: $OPENVPN_PATH"
        
        # Create executable with correct OpenVPN path
        pyinstaller --name="VPN App" --windowed --onefile --add-binary="$OPENVPN_PATH:." --hidden-import=PyQt5.sip --hidden-import=PyQt5.QtCore --hidden-import=PyQt5.QtGui --hidden-import=PyQt5.QtWidgets Main.py

    - name: Create executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --name="VPN App" --windowed --onefile --hidden-import=win32api --hidden-import=win32con --hidden-import=win32gui --hidden-import=PyQt5.sip --hidden-import=PyQt5.QtCore --hidden-import=PyQt5.QtGui --hidden-import=PyQt5.QtWidgets Main.py

    - name: Create executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --name="VPN App" --windowed --onefile --hidden-import=PyQt5.sip --hidden-import=PyQt5.QtCore --hidden-import=PyQt5.QtGui --hidden-import=PyQt5.QtWidgets Main.py

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: VPN-App-${{ matrix.os }}
        path: |
          dist/*.app
          dist/*.exe
          dist/VPN*
        compression-level: 9
        retention-days: 5

    - name: Upload Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.os }}
        path: |
          *.spec
          *.log
          build/*.txt
        retention-days: 1
