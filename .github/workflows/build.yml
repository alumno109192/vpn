name: Build VPN App

on:
  push:
    branches:
      - '*'
    tags:
      - 'v*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ['3.9']
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install qt@5
        brew link qt@5
        brew install pyqt@5
        brew install openvpn
        brew install strongswan
        
        # Get correct paths for binaries
        BREW_PREFIX=$(brew --prefix)
        echo "Brew prefix: $BREW_PREFIX"
        
        # Create necessary directories
        sudo mkdir -p /usr/local/opt
        sudo mkdir -p /opt/homebrew/opt
        
        # Create symlinks with proper permissions
        if [ -d "$BREW_PREFIX/opt/strongswan" ]; then
          sudo ln -sf "$BREW_PREFIX/opt/strongswan" /usr/local/opt/strongswan
          sudo ln -sf "$BREW_PREFIX/opt/strongswan" /opt/homebrew/opt/strongswan
        fi
        
        if [ -d "$BREW_PREFIX/opt/openvpn" ]; then
          sudo ln -sf "$BREW_PREFIX/opt/openvpn" /usr/local/opt/openvpn
          sudo ln -sf "$BREW_PREFIX/opt/openvpn" /opt/homebrew/opt/openvpn
        fi
        
        # Verify installations
        ls -la "$BREW_PREFIX/opt/strongswan/sbin/"
        ls -la "$BREW_PREFIX/opt/openvpn/sbin/"

    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y python3-dev python3-pyqt5 \
          python3-pyqt5.qtwebengine qttools5-dev-tools build-essential \
          libqt5x11extras5-dev openvpn strongswan libssl-dev libffi-dev

    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        python -m pip install --upgrade pip
        pip install wheel
        pip install pywin32
        choco install openvpn -y
        # Note: StrongSwan not available for Windows, using built-in VPN client instead

    - name: Install Python dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        python -m pip install --upgrade pip
        pip install PyInstaller
        pip install pexpect
        pip install --only-binary :all: PyQt5==5.15.11 PyQt5-Qt5 PyQt5-sip

    - name: Install Python dependencies (non-macOS)
      if: matrix.os != 'macos-latest'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install PyInstaller

    - name: Create executable (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Get brew prefix
        BREW_PREFIX=$(brew --prefix)
        
        # Set up binary paths
        OPENVPN_PATH="$BREW_PREFIX/opt/openvpn/sbin/openvpn"
        
        # Find StrongSwan binary directly in Cellar
        STRONGSWAN_PATH=$(find "$BREW_PREFIX/Cellar/strongswan" -type f -name "charon-cmd" -o -name "charon" | grep "libexec/ipsec" | head -n 1)
        
        echo "OpenVPN path: $OPENVPN_PATH"
        echo "StrongSwan path: $STRONGSWAN_PATH"
        
        # Verify binaries exist
        if [ ! -f "$OPENVPN_PATH" ] || [ ! -x "$OPENVPN_PATH" ]; then
          echo "Error: OpenVPN binary not found or not executable"
          ls -la "$BREW_PREFIX/opt/openvpn/sbin/"
          exit 1
        fi
        
        if [ -z "$STRONGSWAN_PATH" ]; then
          echo "Error: StrongSwan binary not found"
          echo "Searching in Cellar..."
          find "$BREW_PREFIX/Cellar/strongswan" -type f -name "charon*"
          exit 1
        fi
        
        # Create executable (all on one line)
        pyinstaller --name="VPN App" --windowed --onefile --add-binary="$OPENVPN_PATH:." --add-binary="$STRONGSWAN_PATH:." --hidden-import=PyQt5.sip --hidden-import=PyQt5.QtCore --hidden-import=PyQt5.QtGui --hidden-import=PyQt5.QtWidgets Main.py

    - name: Create executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $env:PATH = "C:\Program Files\OpenVPN\bin;$env:PATH"
        pyinstaller --name="VPN App" `
          --windowed `
          --onefile `
          --hidden-import=win32api `
          --hidden-import=win32con `
          --hidden-import=win32gui `
          --hidden-import=PyQt5.sip `
          --hidden-import=PyQt5.QtCore `
          --hidden-import=PyQt5.QtGui `
          --hidden-import=PyQt5.QtWidgets `
          --add-binary="C:\Program Files\OpenVPN\bin\openvpn.exe;." `
          Main.py

    - name: Create executable (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        pyinstaller --name="VPN App" \
          --windowed \
          --onefile \
          --hidden-import=PyQt5.sip \
          --hidden-import=PyQt5.QtCore \
          --hidden-import=PyQt5.QtGui \
          --hidden-import=PyQt5.QtWidgets \
          Main.py

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: VPN-App-${{ matrix.os }}
        path: |
          dist/*.app
          dist/*.exe
          dist/VPN*
        compression-level: 9
        retention-days: 5

    - name: Upload Build Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.os }}
        path: |
          *.spec
          *.log
          build/*.txt
        retention-days: 1

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*.app
          dist/*.exe
          dist/VPN*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
